"""
Analyse d'impact concurrentiel
Simulation de l'effet d'ouverture de nouveaux concurrents
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import folium
from folium import plugins
from geopy.distance import geodesic
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots

class CompetitiveImpactAnalyzer:
    \"\"\"Analyseur d'impact concurrentiel\"\"\"\n    \n    def __init__(self, magasins_df, concurrents_df):\n        self.magasins = magasins_df.copy()\n        self.concurrents = concurrents_df.copy()\n        self.impact_results = {}\n    \n    def calculate_distance_matrix(self):\n        \"\"\"Calcule la matrice des distances entre magasins et concurrents\"\"\"\n        \n        distances = []\n        \n        for _, magasin in self.magasins.iterrows():\n            mag_coords = (magasin['latitude'], magasin['longitude'])\n            \n            for _, concurrent in self.concurrents.iterrows():\n                conc_coords = (concurrent['latitude'], concurrent['longitude'])\n                \n                distance_km = geodesic(mag_coords, conc_coords).kilometers\n                \n                distances.append({\n                    'id_magasin': magasin['id_magasin'],\n                    'id_concurrent': concurrent['id_site'],\n                    'distance_km': distance_km,\n                    'magasin_ca': magasin['ca_annuel'],\n                    'magasin_ville': magasin['ville'],\n                    'concurrent_type': concurrent['type_concurrent'],\n                    'concurrent_surface': concurrent['surface_prevue'],\n                    'zone_chalandise': concurrent['zone_chalandise_km']\n                })\n        \n        return pd.DataFrame(distances)\n    \n    def estimate_impact_by_distance(self, distance_matrix):\n        \"\"\"Estime l'impact selon la distance et la zone de chalandise\"\"\"\n        \n        # Mod√®le d'impact bas√© sur la distance et la taille du concurrent\n        def calculate_impact(row):\n            distance = row['distance_km']\n            zone_chalandise = row['zone_chalandise']\n            surface_concurrent = row['concurrent_surface']\n            ca_actuel = row['magasin_ca']\n            \n            # Impact maximal si dans la zone de chalandise\n            if distance <= zone_chalandise:\n                # Impact proportionnel √† la surface du concurrent\n                impact_base = min(0.25, surface_concurrent / 5000)  # Max 25% impact\n                \n                # Facteur distance (plus proche = plus d'impact)\n                distance_factor = max(0.1, 1 - (distance / zone_chalandise))\n                \n                # Impact final\n                impact_percent = impact_base * distance_factor\n                \n                # Perte de CA estim√©e\n                perte_ca = ca_actuel * impact_percent\n                \n                return {\n                    'impact_percent': impact_percent,\n                    'perte_ca_estimee': perte_ca,\n                    'dans_zone': True\n                }\n            else:\n                return {\n                    'impact_percent': 0,\n                    'perte_ca_estimee': 0,\n                    'dans_zone': False\n                }\n        \n        # Application du calcul d'impact\n        impacts = distance_matrix.apply(calculate_impact, axis=1, result_type='expand')\n        \n        # Fusion avec la matrice de distance\n        result = pd.concat([distance_matrix, impacts], axis=1)\n        \n        return result\n    \n    def analyze_scenario(self, concurrent_id):\n        \"\"\"Analyse l'impact d'un concurrent sp√©cifique\"\"\"\n        \n        print(f\"üéØ Analyse d'impact - Concurrent {concurrent_id}\")\n        print(\"=\"*50)\n        \n        # Calcul des distances\n        distance_matrix = self.calculate_distance_matrix()\n        \n        # Filtrage pour le concurrent analys√©\n        concurrent_data = distance_matrix[distance_matrix['id_concurrent'] == concurrent_id]\n        \n        # Calcul des impacts\n        impacts = self.estimate_impact_by_distance(concurrent_data)\n        \n        # Magasins impact√©s\n        magasins_impactes = impacts[impacts['dans_zone'] == True]\n        \n        if len(magasins_impactes) == 0:\n            print(\"‚úÖ Aucun magasin impact√© par ce concurrent\")\n            return None\n        \n        # Statistiques d'impact\n        nb_impactes = len(magasins_impactes)\n        perte_totale = magasins_impactes['perte_ca_estimee'].sum()\n        impact_moyen = magasins_impactes['impact_percent'].mean()\n        \n        print(f\"üìä R√©sultats:\")\n        print(f\"   ‚Ä¢ Magasins impact√©s: {nb_impactes}\")\n        print(f\"   ‚Ä¢ Perte de CA totale: {perte_totale:,.0f}‚Ç¨\")\n        print(f\"   ‚Ä¢ Impact moyen: {impact_moyen:.1%}\")\n        \n        # D√©tail par magasin\n        print(f\"\\nüè™ D√©tail par magasin:\")\n        detail = magasins_impactes[[\n            'id_magasin', 'magasin_ville', 'distance_km', \n            'impact_percent', 'perte_ca_estimee'\n        ]].sort_values('perte_ca_estimee', ascending=False)\n        \n        for _, row in detail.iterrows():\n            print(f\"   ‚Ä¢ {row['id_magasin']} ({row['magasin_ville']}): \")\n            print(f\"     Distance: {row['distance_km']:.1f}km, \")\n            print(f\"     Impact: {row['impact_percent']:.1%}, \")\n            print(f\"     Perte: {row['perte_ca_estimee']:,.0f}‚Ç¨\")\n        \n        self.impact_results[concurrent_id] = {\n            'impacts': impacts,\n            'magasins_impactes': magasins_impactes,\n            'perte_totale': perte_totale,\n            'nb_impactes': nb_impactes\n        }\n        \n        return impacts\n    \n    def create_impact_map(self, concurrent_id):\n        \"\"\"Cr√©e une carte d'impact visuelle\"\"\"\n        \n        if concurrent_id not in self.impact_results:\n            print(\"‚ùå Aucune analyse disponible pour ce concurrent\")\n            return None\n        \n        impacts = self.impact_results[concurrent_id]['impacts']\n        concurrent_info = self.concurrents[self.concurrents['id_site'] == concurrent_id].iloc[0]\n        \n        # Cr√©ation de la carte\n        center_lat = impacts['magasin_coords_lat'].mean() if 'magasin_coords_lat' in impacts.columns else 46.6034\n        center_lon = impacts['magasin_coords_lon'].mean() if 'magasin_coords_lon' in impacts.columns else 1.8883\n        \n        # Centre sur la France si pas de coordonn√©es\n        m = folium.Map(location=[center_lat, center_lon], zoom_start=8)\n        \n        # Ajout du concurrent\n        folium.Marker(\n            location=[concurrent_info['latitude'], concurrent_info['longitude']],\n            popup=f\"\"\"<b>üè™ NOUVEAU CONCURRENT</b><br>\n                     {concurrent_info['type_concurrent']}<br>\n                     Surface: {concurrent_info['surface_prevue']}m¬≤<br>\n                     Zone: {concurrent_info['zone_chalandise_km']}km\"\"\",\n            icon=folium.Icon(color='red', icon='exclamation-sign')\n        ).add_to(m)\n        \n        # Zone de chalandise du concurrent\n        folium.Circle(\n            location=[concurrent_info['latitude'], concurrent_info['longitude']],\n            radius=concurrent_info['zone_chalandise_km'] * 1000,  # m√®tres\n            color='red',\n            fill=True,\n            opacity=0.3,\n            popup=f\"Zone de chalandise ({concurrent_info['zone_chalandise_km']}km)\"\n        ).add_to(m)\n        \n        # Ajout des magasins avec impact\n        for _, magasin in self.magasins.iterrows():\n            # Recherche de l'impact pour ce magasin\n            impact_data = impacts[impacts['id_magasin'] == magasin['id_magasin']]\n            \n            if len(impact_data) > 0:\n                impact = impact_data.iloc[0]\n                \n                # Couleur selon l'impact\n                if impact['dans_zone']:\n                    if impact['impact_percent'] > 0.15:\n                        color = 'darkred'\n                        icon = 'arrow-down'\n                    elif impact['impact_percent'] > 0.05:\n                        color = 'orange'\n                        icon = 'minus'\n                    else:\n                        color = 'yellow'\n                        icon = 'exclamation'\n                else:\n                    color = 'green'\n                    icon = 'ok'\n                \n                popup_text = f\"\"\"\n                <b>{magasin['enseigne']} - {magasin['id_magasin']}</b><br>\n                üìç {magasin['ville']}<br>\n                üí∞ CA actuel: {magasin['ca_annuel']:,.0f}‚Ç¨<br>\n                üìè Distance: {impact['distance_km']:.1f}km<br>\n                üìâ Impact: {impact['impact_percent']:.1%}<br>\n                üí∏ Perte estim√©e: {impact['perte_ca_estimee']:,.0f}‚Ç¨\n                \"\"\"\n                \n                folium.Marker(\n                    location=[magasin['latitude'], magasin['longitude']],\n                    popup=popup_text,\n                    icon=folium.Icon(color=color, icon=icon)\n                ).add_to(m)\n        \n        return m\n    \n    def compare_scenarios(self):\n        \"\"\"Compare l'impact de tous les concurrents\"\"\"\n        \n        print(\"üìä COMPARAISON DES SC√âNARIOS\")\n        print(\"=\"*50)\n        \n        if not self.impact_results:\n            print(\"‚ùå Aucune analyse d'impact disponible\")\n            return None\n        \n        # Compilation des r√©sultats\n        comparison_data = []\n        \n        for concurrent_id, results in self.impact_results.items():\n            concurrent_info = self.concurrents[self.concurrents['id_site'] == concurrent_id].iloc[0]\n            \n            comparison_data.append({\n                'concurrent_id': concurrent_id,\n                'type': concurrent_info['type_concurrent'],\n                'surface': concurrent_info['surface_prevue'],\n                'zone_chalandise': concurrent_info['zone_chalandise_km'],\n                'magasins_impactes': results['nb_impactes'],\n                'perte_totale': results['perte_totale']\n            })\n        \n        comparison_df = pd.DataFrame(comparison_data)\n        comparison_df = comparison_df.sort_values('perte_totale', ascending=False)\n        \n        print(\"üéØ Ranking des menaces:\")\n        for i, row in comparison_df.iterrows():\n            print(f\"{row.name + 1}. {row['concurrent_id']} ({row['type']})\")\n            print(f\"   Perte estim√©e: {row['perte_totale']:,.0f}‚Ç¨\")\n            print(f\"   Magasins impact√©s: {row['magasins_impactes']}\")\n            print()\n        \n        return comparison_df\n    \n    def generate_report(self, output_file='../data/rapport_impact_concurrentiel.txt'):\n        \"\"\"G√©n√®re un rapport d'analyse\"\"\"\n        \n        with open(output_file, 'w', encoding='utf-8') as f:\n            f.write(\"RAPPORT D'ANALYSE CONCURRENTIELLE\\n\")\n            f.write(\"=\"*50 + \"\\n\\n\")\n            \n            f.write(f\"Date d'analyse: {pd.Timestamp.now().strftime('%Y-%m-%d %H:%M')}\\n\")\n            f.write(f\"Nombre de magasins analys√©s: {len(self.magasins)}\\n\")\n            f.write(f\"Nombre de concurrents √©valu√©s: {len(self.concurrents)}\\n\\n\")\n            \n            # R√©sum√© par concurrent\n            for concurrent_id, results in self.impact_results.items():\n                concurrent_info = self.concurrents[self.concurrents['id_site'] == concurrent_id].iloc[0]\n                \n                f.write(f\"CONCURRENT: {concurrent_id}\\n\")\n                f.write(f\"Type: {concurrent_info['type_concurrent']}\\n\")\n                f.write(f\"Surface: {concurrent_info['surface_prevue']}m¬≤\\n\")\n                f.write(f\"Zone de chalandise: {concurrent_info['zone_chalandise_km']}km\\n\")\n                f.write(f\"Magasins impact√©s: {results['nb_impactes']}\\n\")\n                f.write(f\"Perte totale estim√©e: {results['perte_totale']:,.0f}‚Ç¨\\n\")\n                f.write(\"-\" * 30 + \"\\n\\n\")\n        \n        print(f\"‚úÖ Rapport g√©n√©r√©: {output_file}\")\n\n\ndef demo_competitive_analysis():\n    \"\"\"D√©monstration de l'analyse concurrentielle\"\"\"\n    \n    print(\"üîç D√âMONSTRATION - Analyse d'impact concurrentiel\")\n    print(\"=\"*60)\n    \n    # Chargement des donn√©es\n    magasins = pd.read_csv('../data/magasins_performance.csv')\n    concurrents = pd.read_csv('../data/sites_concurrents.csv')\n    \n    # Initialisation de l'analyseur\n    analyzer = CompetitiveImpactAnalyzer(magasins, concurrents)\n    \n    # Analyse des 3 premiers concurrents\n    for i in range(min(3, len(concurrents))):\n        concurrent_id = concurrents.iloc[i]['id_site']\n        print(f\"\\nüìç Analyse du concurrent {concurrent_id}\")\n        analyzer.analyze_scenario(concurrent_id)\n        print(\"\\n\" + \"-\"*50)\n    \n    # Comparaison des sc√©narios\n    print(\"\\n\")\n    comparison = analyzer.compare_scenarios()\n    \n    # G√©n√©ration du rapport\n    analyzer.generate_report()\n    \n    return analyzer\n\n\nif __name__ == \"__main__\":\n    analyzer = demo_competitive_analysis()